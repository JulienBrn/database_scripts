# channels:
#   - channel_name: 'LED(?P<num>\d+)'
#     states:
#       - name: '{channel_name}_State'
#         expr: '_V'
#   - channel_name: 'L(?P<num>\d+)'
#     states:
#       - name: '{channel_name}_State'
#         expr: '_V'
#   - channel_name: 'LK(?P<num>\d+)'
#     states:
#       - name: '{channel_name}_lick'
#         expr: '_V'
#       - name: 
#     events:
#       - name: reward
#       - exp= taskr: '_L > 0' 
#   - channel_name: 'LK(?P<num>\d+)'
#     states:
#       - name: '{channel_name}_reward'
#         expr: '_L > 0'
      
# states:
#   - match: 
#       channel: 'LED(?P<num>\d+)'
#     expression: '_V'
#     name: '{match}'
  
  
- event_name: '{channel_name}'
  filter:
    channel_name: ['LED(\d+)', 'ASND', 'TTLP(\d+)']
  state_value: '_V'
  start_condition: '_V==1'
  meta: 
    count: '_L'

- event_name: '{channel_name}'
  filter:
    channel_name: 'L(\d+)'
  start_condition: '_V==1'
  state_value: '_V'
  
- event_name: '{channel_name}_lick'
  filter:
    channel_name: 'LK(\d+)'
  start_condition: '_V==1'
  state_value: '_V'

- event_name: '{channel_name}_reward'
  filter:
    channel_name: 'LK(\d+)'
  start_condition: '_P==1'
  state_value: '_P'
  # meta: 
  #   count: '_L'

- event_name: 'PAD_V'
  filter:
    channel_name: 'PAD'
  start_condition: '_V==0'
  state_value: '_V'

- event_name: 'PAD_P'
  filter:
    channel_name: 'PAD'
  start_condition: '_P==0'
  state_value: '_P'

- event_name: 'poly_linenum_change'
  filter:
    family: 10
  state_value: '_T'

- event_name: 'file_read'
  filter:
    channel_name: 'RD'
  meta: 
    read_value: '_T'

- event_name: 'zone_change'
  filter:
    family: 9
  discarded: True

- event_name: 'str_display'
  filter:
    channel_name: 'STR\d'
  discarded: True

- event_name: 'stop'
  filter:
    family: 11
  meta:
    cause: '_V'
      